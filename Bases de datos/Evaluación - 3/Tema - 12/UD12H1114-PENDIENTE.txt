SET SERVEROUTPUT ON
-- 1.	Escribir un bloque PL/SQL que escriba el texto ‘Hola’
BEGIN
  DBMS_OUTPUT.PUT_LINE('Hola');
END;

-- 2.	Escribir un procedimiento que reciba dos números y visualice su suma.
DECLARE
  num1 INTEGER;
  num2 INTEGER;
  sum1 INTEGER;
BEGIN
  num1 := &INPUT1;
  num2 := &INPUT2;
  sum1 := (num1 + num2);
  DBMS_OUTPUT.PUT_LINE('La suma de ' || num1 || ' y ' || num2 || ' da: ' || sum1);
END;

-- 3.	Codificar un procedimiento que reciba una cadena y la visualice al revés.
CREATE OR REPLACE PROCEDURE str_reverse (cadena VARCHAR)
IS
  anedac VARCHAR(9999);
BEGIN
  SELECT REVERSE(cadena) INTO anedac FROM DUAL;
  DBMS_OUTPUT.PUT_LINE('Esta es tu cadena al revés');
  DBMS_OUTPUT.PUT_LINE(anedac);
END;

EXEC str_reverse('hola');

-- 4.	Escribir una función que reciba una fecha y devuelva el año, en número, correspondiente a esa fecha.
CREATE OR REPLACE FUNCTION actualyear(fecha DATE) RETURN INTEGER
IS
  anyo INTEGER;
begin
  anyo := extract(year from FECHA);
  return anyo;
end;
/

-- 5.	Escribir un bloque PL/SQL que haga uso de la función anterior.
DECLARE
  anyo integer;
begin
  anyo := actualyear(TO_DATE('0207','mm/yy'));
  DBMS_OUTPUT.PUT_LINE(anyo);
END;

-- 6.	Dado el siguiente procedimiento
--create or replace procedure CREAR_DEPART (
   --P_NUM_DEPT DEPART.DEPT_NO%type,
   --P_DNOMBRE DEPART.DNOMBRE%type default 'PROVISIONAL',
   --P_LOC DEPART.LOC%type default 'PROVISIONAL')
--is
--begin
   --insert into DEPART
   --values (P_NUM_DEPT, P_DNOMBRE, P_LOC);
--end CREAR_DEPART;
--/

-- Indicar cuáles de las siguientes llamadas son correctas y cuáles incorrectas, en este último caso escribir la llamada correcta usando la notación posicional (en los casos que se pueda):
-- error    1º. crear_depart;
-- correcto 2º. CREAR_DEPART(50);
-- error    3º. crear_depart('COMPRAS');
-- correcto 4º. CREAR_DEPART(50,'COMPRAS');
-- error    5º. CREAR_DEPART('COMPRAS', 50);
-- error    6º. crear_depart('COMPRAS', 'VALENCIA');
-- correcto 7º. CREAR_DEPART(50, 'COMPRAS', 'VALENCIA');
-- error    8º. crear_depart('COMPRAS', 50, 'VALENCIA');
-- error    9º. CREAR_DEPART('VALENCIA', ‘COMPRAS’);
-- error    10º. CREAR_DEPART('VALENCIA', 50);

-- 7. Desarrollar una función que devuelva el número de años completos que hay entre dos fechas que se pasan como argumentos.
CREATE OR REPLACE
  FUNCTION get_date_difference(
      date1 DATE,
      date2 DATE) RETURN INTEGER
  IS
    date_difference INTEGER;
  BEGIN
    date_difference := floor((date1 - date2) / 365);
    RETURN date_difference;
  END;
/

-- 8.	Escribir una función que, haciendo uso de la función anterior devuelva los trienios que hay entre dos fechas. (Un trienio son tres años completos).
CREATE OR REPLACE
  FUNCTION get_date_difference_triennium(
      date1 DATE,
      date2 DATE) RETURN INTEGER
  IS
    date_difference INTEGER;
  BEGIN
    date_difference := TRUNC(get_date_difference(date1, date2) / 3);
    RETURN date_difference;
  END;
/

-- 9. Codificar un procedimiento que reciba una lista de hasta 5 números y visualice su suma.
CREATE OR REPLACE
PROCEDURE sum_nums(
    num1 INTEGER DEFAULT 0,
    num2 INTEGER DEFAULT 0,
    num3 INTEGER DEFAULT 0,
    num4 INTEGER DEFAULT 0,
    num5 INTEGER DEFAULT 0)
IS
  result_total INTEGER;
BEGIN
  result_total := num1 + num2 + num3 + num4 + num5;
  DBMS_OUTPUT.PUT_LINE(result_total);
END;
/

-- 10. Escribir una función que devuelva solamente caracteres alfabéticos sustituyendo cualquier otro carácter por blancos a partir de una cadena que se pasará en la llamada.
CREATE OR REPLACE
  FUNCTION str_num_cleaner(
      str STRING)
    RETURN STRING
  IS
    str_clean STRING(20);
    actual_char STRING(2);
  BEGIN
    FOR indice IN 1..LENGTH(str)
    LOOP
      actual_char := SUBSTR(str, indice, 1);
      IF NOT (ascii(actual_char) >= 65 AND ascii(actual_char) <= 90 OR ascii(actual_char) >= 97 AND ascii(actual_char) <= 122) THEN
        actual_char := ' ';
      END IF;
      str_clean := str_clean || actual_char;
    END LOOP;
    RETURN str_clean;
  END;

-- 11.	Implementar un procedimiento que reciba un importe y visualice el desglose del cambio en unidades monetarias de 1 cent., 2 cents., 5 cents., 10 cents., 20 cents., 50 cents., 1€, 2€, 5€, 10€, 20€, 50€ en orden inverso al que aparecen aquí enumeradas.
CREATE OR REPLACE
PROCEDURE cambios(
    importe FLOAT )
IS
  tmp_importe FLOAT;
  coins STRING(9999);
BEGIN
  tmp_importe       := importe;
  coins             := '';
  WHILE tmp_importe <> 0
  LOOP
    CASE
    WHEN tmp_importe >= 50 THEN
      tmp_importe    := tmp_importe - 50;
      coins          := coins || '50';
    WHEN tmp_importe >= 20 THEN
      tmp_importe    := tmp_importe - 20;
      coins          := coins || '20';
    WHEN tmp_importe >= 10 THEN
      tmp_importe    := tmp_importe - 10;
      coins          := coins || '10';
    WHEN tmp_importe >= 5 THEN
      tmp_importe    := tmp_importe - 5;
      coins          := coins || '5';
    WHEN tmp_importe >= 2 THEN
      tmp_importe    := tmp_importe - 2;
      coins          := coins || '2';
    WHEN tmp_importe >= 1 THEN
      tmp_importe    := tmp_importe - 1;
      coins          := coins || '1';
    WHEN tmp_importe >= 0.50 THEN
      tmp_importe    := tmp_importe - 0.50;
      coins          := coins || '0.50';
    WHEN tmp_importe >= 0.20 THEN
      tmp_importe    := tmp_importe - 0.20;
      coins          := coins || '0.20';
    WHEN tmp_importe >= 0.10 THEN
      tmp_importe    := tmp_importe - 0.10;
      coins          := coins || '0.10';
    WHEN tmp_importe >= 0.05 THEN
      tmp_importe    := tmp_importe - 0.05;
      coins          := coins || '0.05';
    WHEN tmp_importe >= 0.02 THEN
      tmp_importe    := tmp_importe - 0.02;
      coins          := coins || '0.02';
    WHEN tmp_importe >= 0.01 THEN
      tmp_importe    := tmp_importe - 0.01;
      coins          := coins || '0.01';
    ELSE
      coins := 'Esto no son euros, lo siento...';
      EXIT;
    END CASE;
    IF tmp_importe <> 0 THEN
      coins        := coins || ', ';
    END IF;
  END LOOP;
  DBMS_OUTPUT.PUT_LINE(coins);
END;
/

-- 12.	Codificar un procedimiento que permita borrar un empleado cuyo número se pasará en la llamada.
CREATE OR REPLACE
PROCEDURE borrar_empleado_por_id(
    id_empleado emple.emp_no%TYPE)
IS
  id_emple emple.emp_no%TYPE;
BEGIN
  SELECT emp_no INTO id_emple FROM emple WHERE emp_no = id_empleado;
  DELETE FROM emple WHERE emp_no = id_emple;
  dbms_output.put_line('Empleado del ID: ' || id_emple || ' borrado');
  
EXCEPTION
WHEN NO_DATA_FOUND THEN
  dbms_output.put_line('El ID: ' || id_empleado || ' no existe');
END;
/
BEGIN
  borrar_empleado_por_id(7934);
END;

-- 13.	Escribir un procedimiento que modifique la localidad de un departamento. El procedimiento recibirá como parámetros el número del departamento y la localidad nueva.
-- 14.	Visualizar todos los procedimientos y funciones del usuario almacenados en la base de datos y su situación (valid o invalid).







