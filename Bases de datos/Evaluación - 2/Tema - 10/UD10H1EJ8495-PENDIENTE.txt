-- 84)	Calcula el precio total de los pedidos de nuestros clientes.
SELECT id_cliente, SUM(precio_total) AS Total
  FROM pedidos
  GROUP BY id_cliente;
  
-- 85)	Comprueba si la precisión de los campos numéricos de las tablas PEDIDOS, PEDIDOS_HISTORICO, DETALLES_ PEDIDOS y DETALLES_ PEDIDOS_HISTORICO coincide. Si no es así modifícalas para que haya coincidencia.
SELECT table_name, column_name, data_precision
  FROM ALL_TAB_COLUMNS
    WHERE TABLE_NAME IN ('PEDIDOS', 'PEDIDOS_HISTORICO', 'DETALLES_PEDIDOS', 'DETALLES_PEDIDOS_HISTORICO')
    AND data_type = 'NUMBER';

ALTER TABLE DETALLES_PEDIDOS_HISTORICO
  MODIFY (
    precio NUMBER(6)
  );

ALTER TABLE PEDIDOS_HISTORICO
  MODIFY (
    PRECIO_TOTAL NUMBER(7)
  );
    
SELECT table_name, column_name, data_precision
  FROM ALL_TAB_COLUMNS
    WHERE TABLE_NAME IN ('PEDIDOS', 'PEDIDOS_HISTORICO', 'DETALLES_PEDIDOS', 'DETALLES_PEDIDOS_HISTORICO')
    AND data_type = 'NUMBER';

-- 86)	Nuestra empresa es líder del mercado y puede permitirse hacer lo que le apetezca. Por eso ha decidido que aplicará con efecto retroactivo las últimas subidas de precio. 
-- Para eso los datos que hasta ahora teníamos en la tabla PEDIDOS los guardaremos  en la tabla PEDIDOS_HISTORICO. Y lo mismo haremos con DETALLES_ PEDIDOS y DETALLES_ PEDIDOS_HISTORICO. Confirmarlo lo más tarde posible.
    
INSERT INTO pedidos_historico
  SELECT *
    FROM pedidos;
    
INSERT INTO detalles_pedidos_historico
  SELECT *
    FROM detalles_pedidos;
    
UPDATE detalles_pedidos SET precio = (SELECT precio_venta FROM productos WHERE productos.numero_producto = detalles_pedidos.numero_producto);

-- 87)	Incrementa el precio de venta de todos los productos en un 10%. El departamento de ventas quiere deshacer los cambios lo antes posible.
UPDATE productos SET precio_venta = precio_venta + precio_venta * 0.10;
rollback;

-- 88)	Tenemos que subir un 4% los precios de los productos de la categoría 'Ropa' y deshacer los cambios lo más tarde posible.
commit;
  
-- 	a) Mostrar un listado con los nombres de los productos, el precio actual y el precio que tendrán después de la subida.
SELECT nombre, precio_venta AS precio_actual, precio_venta + precio_venta * 0.04
  FROM productos
  INNER JOIN categorias
    ON productos.id_categoria = categorias.id_categoria
    
      WHERE LOWER(categorias.descripcion) LIKE 'ropa';
      
-- 	b) Actualizar los precios de venta de dichos productos subiéndolos un 4%.
UPDATE productos SET precio_venta = precio_venta + precio_venta * 0.04
  WHERE id_categoria = (SELECT id_categoria FROM categorias WHERE LOWER(categorias.descripcion) LIKE 'ropa');

-- 89)	Incrementar un 5% los precios de los productos de la categoría 'Ropa', a continuación actualiza los precios en DETALLES_PEDIDOS para que se correspondan con los que hay en la tabla productos y por último actualiza en la tabla PEDIDOS el precio total de cada pedido de acuerdo a los nuevos precios de los productos. Confirmarlo lo más tarde posible. 
rollback;
UPDATE productos SET precio_venta = precio_venta + precio_venta * 0.05
  WHERE id_categoria = (SELECT id_categoria FROM categorias WHERE LOWER(categorias.descripcion) LIKE 'ropa');

UPDATE detalles_pedidos SET precio =
  (SELECT precio_venta
    FROM productos
    --INNER JOIN detalles_pedidos
      --ON productos.numero_producto = detalles_pedidos.numero_producto
    INNER JOIN categorias
      ON productos.id_categoria = categorias.id_categoria
      
        WHERE productos.numero_producto = detalles_pedidos.numero_producto
        AND LOWER(categorias.descripcion) LIKE 'ropa');

UPDATE pedidos SET precio_total =
  (SELECT SUM(nvl(precio, 0)) AS precio_total
      FROM detalles_pedidos
        GROUP BY numero_pedido
        HAVING pedidos.numero_pedido = detalles_pedidos.numero_pedido);

-- 90)	 A partir de la tabla pedidos crea la tabla SALDOS_PENDIENTES con los mismos campos que la tabla pedidos y en el campo PRECIO_TOTAL el valor de la diferencia entre el PRECIO_TOTAL actualizado y el PRECIO_TOTAL antes de la actualización (éste último se encuentra en la tabla PEDIDOS_HISTORICO).
CREATE TABLE saldos_pendientes AS SELECT * FROM pedidos;
UPDATE saldos_pendientes SET precio_total = precio_total - (SELECT precio_total FROM pedidos_historico WHERE saldos_pendientes.numero_pedido = pedidos_historico.numero_pedido);

-- 91)	 Ejecuta la sentencia rollback. ¿Qué pasa? ¿Por qué?
rollback;
 -- Que todos los cambios que había hecho después del ultimo commit incluida la creación de la tabla se han descartado.

-- 92)	 Mostrar el nombre del proveedor y el promedio por proveedor del número de días que se tarda en realizar el envío de los productos. Hay que mostrar aquellos cuyo promedio sea mayor que el promedio de todos los proveedores.
-- 93)	Hacer una consulta que muestre el nombre del producto y  el total vendido de aquellos productos que superan el promedio de ventas de su categoría.
-- 94)	Listar por cada cliente y fecha de pedido el nombre completo y el coste total del pedido si éste supera los 1000 euros. El coste del pedido hay que calcularlo a partir de la tabla DETALLES_PEDIDOS.
-- 95)	¿Cuántos pedidos hay de un sólo producto?